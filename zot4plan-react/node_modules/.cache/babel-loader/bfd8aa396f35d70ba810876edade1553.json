{"ast":null,"code":"var _jsxFileName = \"/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/CourseCard.js\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Popover, OverlayTrigger, Button } from 'react-bootstrap';\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport ItemTypes from '../assets/ItemTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CourseCard(_ref) {\n  _s();\n\n  let {\n    item,\n    index\n  } = _ref;\n  const ref = useRef(null);\n  /* const [, dropRef] = useDrop({\n       accept: ItemTypes,\n       hover(item, monitor) {\n           if(!ref.current){\n               return;\n           }\n           const dragIndex = item.id;\n           const hoverIndex = index;\n            if(dragIndex === hoverIndex) {\n               return;\n           }\n            const hoveredRect = ref.current.getBoundClientRect();\n           const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n           const mousePosition = monitor.getClientOffset();\n           const hoverClientY = mousePosition.y - hoveredRect.top;\n            if(dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n               return;\n           }\n           if(dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {\n               return;\n           }\n          // moveItem(dragIndex, hoverIndex);\n           item.id=hoverIndex;\n           \n       }\n   }) */\n\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    type: ItemTypes,\n    item: () => ({\n      item\n    }),\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }); // const [show, setShow] = useState(false);\n  // const onOpen = () => setShow(true);\n  // const onClose = () => setShow(false);\n  // const dragDropRef = dragRef(dropRef(ref))\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dragRef,\n    style: {\n      opacity: isDragging ? 0.4 : 1,\n      minWidth: 100\n    },\n    children: /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n      trigger: \"click\",\n      placement: \"bottom\",\n      overlay: /*#__PURE__*/_jsxDEV(Popover, {\n        id: item.id,\n        children: [/*#__PURE__*/_jsxDEV(Popover.Header, {\n          as: \"h4\",\n          children: [item.id, \",\", item.un]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n          children: [\" \", item.description, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n          children: [\" \", item.prereqString, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n          children: [\" \", item.restriction, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        className: \"w-100\",\n        children: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CourseCard, \"BLr7F2ykMLUGTUwUGvmSVsgiWjk=\", false, function () {\n  return [useDrag];\n});\n\n_c = CourseCard;\nexport default CourseCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CourseCard\");","map":{"version":3,"sources":["/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/CourseCard.js"],"names":["Popover","OverlayTrigger","Button","React","useRef","useDrag","useDrop","ItemTypes","CourseCard","item","index","ref","isDragging","dragRef","type","collect","monitor","opacity","minWidth","id","un","description","prereqString","restriction"],"mappings":";;;AAAA,OAAO,sCAAP;AACA,SAASA,OAAT,EAAiBC,cAAjB,EAAgCC,MAAhC,QAA8C,iBAA9C;AACA,OAAOC,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;AAEA,SAASC,UAAT,OAAmC;AAAA;;AAAA,MAAf;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAe;AAC/B,QAAMC,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAII,QAAM,CAAC;AAACQ,IAAAA;AAAD,GAAD,EAAeC,OAAf,IAA0BR,OAAO,CAAC;AACpCS,IAAAA,IAAI,EAAEP,SAD8B;AAEpCE,IAAAA,IAAI,EAAE,OAAO;AAACA,MAAAA;AAAD,KAAP,CAF8B;AAGpCM,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACnBJ,MAAAA,UAAU,EAAEI,OAAO,CAACJ,UAAR;AADO,KAAd;AAH2B,GAAD,CAAvC,CA/B+B,CAuChC;AACA;AACA;AAEA;;AACC,sBACI;AACI,IAAA,GAAG,EAAEC,OADT;AAEI,IAAA,KAAK,EAAE;AAACI,MAAAA,OAAO,EAAEL,UAAU,GAAE,GAAF,GAAQ,CAA5B;AAA+BM,MAAAA,QAAQ,EAAE;AAAzC,KAFX;AAAA,2BAII,QAAC,cAAD;AACI,MAAA,OAAO,EAAC,OADZ;AAEI,MAAA,SAAS,EAAC,QAFd;AAGI,MAAA,OAAO,eACP,QAAC,OAAD;AAAS,QAAA,EAAE,EAAET,IAAI,CAACU,EAAlB;AAAA,gCACI,QAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAA,qBAAyBV,IAAI,CAACU,EAA9B,OAAmCV,IAAI,CAACW,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD,CAAS,IAAT;AAAA,0BAAgBX,IAAI,CAACY,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,OAAD,CAAS,IAAT;AAAA,0BAAgBZ,IAAI,CAACa,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,OAAD,CAAS,IAAT;AAAA,0BAAgBb,IAAI,CAACc,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,6BAYI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,SAAS,EAAC,OAApC;AAAA,kBAA6Cd,IAAI,CAACU;AAAlD;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GAjEQX,U;UA+B2BH,O;;;KA/B3BG,U;AAoET,eAAeA,UAAf","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Popover,OverlayTrigger,Button } from 'react-bootstrap';\nimport React, {useRef} from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport ItemTypes from '../assets/ItemTypes';\n\nfunction CourseCard({item, index}) {\n    const ref = useRef(null)\n   /* const [, dropRef] = useDrop({\n        accept: ItemTypes,\n        hover(item, monitor) {\n            if(!ref.current){\n                return;\n            }\n            const dragIndex = item.id;\n            const hoverIndex = index;\n\n            if(dragIndex === hoverIndex) {\n                return;\n            }\n\n            const hoveredRect = ref.current.getBoundClientRect();\n            const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n            const mousePosition = monitor.getClientOffset();\n            const hoverClientY = mousePosition.y - hoveredRect.top;\n\n            if(dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n            if(dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n           // moveItem(dragIndex, hoverIndex);\n            item.id=hoverIndex;\n            \n        }\n    }) */\n    const [{isDragging}, dragRef] = useDrag({\n        type: ItemTypes,\n        item: () => ({item}),\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n    });\n    \n   // const [show, setShow] = useState(false);\n   // const onOpen = () => setShow(true);\n   // const onClose = () => setShow(false);\n\n   // const dragDropRef = dragRef(dropRef(ref))\n    return (\n        <div\n            ref={dragRef}\n            style={{opacity: isDragging? 0.4 : 1, minWidth: 100}}\n        >\n            <OverlayTrigger\n                trigger=\"click\"\n                placement='bottom'\n                overlay={\n                <Popover id={item.id}>\n                    <Popover.Header as=\"h4\">{item.id},{item.un}</Popover.Header>\n                    <Popover.Body> {item.description} </Popover.Body>\n                    <Popover.Body> {item.prereqString} </Popover.Body>\n                    <Popover.Body> {item.restriction} </Popover.Body>\n                </Popover>\n                }\n            >\n                <Button variant=\"primary\" className=\"w-100\">{item.id}</Button>\n            </OverlayTrigger>\n        </div>\n    ); \n}\n\n  \nexport default CourseCard;"]},"metadata":{},"sourceType":"module"}