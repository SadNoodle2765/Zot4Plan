{"ast":null,"code":"var _jsxFileName = \"/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/Requirements.js\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport required_ics from '../assets/icsrequirements';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CourseCard from './CourseCard';\nimport { Popover, OverlayTrigger, Button } from 'react-bootstrap';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Requirements = _ref => {\n  _s();\n\n  let {\n    courses,\n    onDrop\n  } = _ref;\n  let courseArray = required_ics;\n  let index = 0;\n  const [{\n    isOver\n  }, dropRef] = useDrop(() => ({\n    accept: ItemTypes,\n    drop: (item, monitor) => onDrop(item.item, 0),\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  }));\n\n  function renderCol() {\n    let columns = [];\n    index++;\n\n    while (index < courseArray.length && courseArray[index][1]) {\n      let courseId = courseArray[index][0];\n\n      if (courses[courseId] != undefined) {\n        if (courses[courseId].quarter !== 0) {\n          columns.push( /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 100\n              },\n              children: /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                trigger: \"click\",\n                placement: \"bottom\",\n                overlay: /*#__PURE__*/_jsxDEV(Popover, {\n                  id: courses[courseId].id,\n                  children: [/*#__PURE__*/_jsxDEV(Popover.Header, {\n                    as: \"h4\",\n                    children: courseId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 38,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n                    children: [\" \", courses[courseId].description, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 39,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n                    children: [\" \", courses[courseId].prereqString, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 40,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n                    children: [\" \", courses[courseId].restriction, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 29\n                }, this),\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-secondary\",\n                  size: \"sm\",\n                  children: courseId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 25\n            }, this)\n          }, courseId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 34\n          }, this));\n        } else {\n          columns.push( /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(CourseCard, {\n              item: courses[courseId],\n              index: courseId,\n              buttonClass: \"edit-button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this)\n          }, courseId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 30\n          }, this));\n        }\n      } else columns.push( /*#__PURE__*/_jsxDEV(Col, {\n        children: courseId\n      }, courseId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 30\n      }, this));\n\n      index++;\n    }\n\n    return columns;\n  }\n\n  function renderRequirements() {\n    var rows = []; // console.log(courses)\n\n    for (index; index < courseArray.length; index++) {\n      let i = index;\n\n      if (!courseArray[index][1]) {\n        rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: courseArray[i][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            xs: 3,\n            md: 4,\n            className: \"mt-2\",\n            children: [\" \", renderCol()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this)]\n        }, courseArray[i][0] + i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 27\n        }, this));\n        index--;\n      }\n    }\n\n    return rows;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderRequirements()\n  }, void 0, false);\n};\n\n_s(Requirements, \"kR+zGxC4m+4GBCr2BiZErhG5N4A=\", false, function () {\n  return [useDrop];\n});\n\n_c = Requirements;\nexport default Requirements;\n\nvar _c;\n\n$RefreshReg$(_c, \"Requirements\");","map":{"version":3,"sources":["/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/Requirements.js"],"names":["required_ics","Container","Row","Col","CourseCard","Popover","OverlayTrigger","Button","useDrop","Requirements","courses","onDrop","courseArray","index","isOver","dropRef","accept","ItemTypes","drop","item","monitor","collect","renderCol","columns","length","courseId","undefined","quarter","push","width","id","description","prereqString","restriction","renderRequirements","rows","i"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport required_ics from '../assets/icsrequirements';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport CourseCard from './CourseCard'\nimport { Popover,OverlayTrigger,Button } from 'react-bootstrap';\nimport { useDrop } from 'react-dnd';\n\n\nconst Requirements = ({courses, onDrop}) => {\n\n    let courseArray = required_ics\n    let index = 0\n\n    const [{ isOver }, dropRef] = useDrop(() => ({\n        accept: ItemTypes,\n        drop: (item, monitor) => onDrop(item.item, 0),\n        collect: (monitor) => ({\n          isOver: monitor.isOver(),\n        }),\n      })); \n\n    function renderCol(){  \n        let columns = []\n        index++\n        while(index < courseArray.length && courseArray[index][1]){\n            let courseId =  courseArray[index][0]\n            \n            if(courses[courseId] != undefined){\n\n                if(courses[courseId].quarter !== 0){\n                    columns.push(<Col key = {courseId}>\n                        <div style={{width: 100}}>\n                        <OverlayTrigger\n                            trigger=\"click\"\n                            placement='bottom'\n                            overlay={\n                            <Popover id={courses[courseId].id}>\n                                <Popover.Header as=\"h4\">{courseId}</Popover.Header>\n                                <Popover.Body> {courses[courseId].description} </Popover.Body>\n                                <Popover.Body> {courses[courseId].prereqString} </Popover.Body>\n                                <Popover.Body> {courses[courseId].restriction} </Popover.Body>\n                            </Popover>\n                            }\n                            >\n                            <Button variant=\"outline-secondary\" size ='sm'>{courseId}</Button>\n                        </OverlayTrigger>\n                        </div>\n                        </Col>)\n                }else{\n\n                columns.push(<Col key = {courseId}>\n                    <CourseCard \n                        item={courses[courseId]}\n                        index={courseId}\n                        buttonClass=\"edit-button\" > \n                    </CourseCard>\n                    </Col>)\n                }\n            }\n            else\n                columns.push(<Col key = {courseId}>{courseId}</Col>)\n            index++\n\n        }\n        return columns\n    }\n\n    function renderRequirements(){        \n        var rows = []\n\n       // console.log(courses)\n        for(index; index < courseArray.length; index++){\n            let i = index \n            if(!courseArray[index][1]){\n                rows.push(<div key = {courseArray[i][0] + i}> \n                                <h6>{courseArray[i][0]}</h6> \n                                <Row xs={3} md={4} className=\"mt-2\"> {renderCol()}</Row>\n                          </div>)\n                index--\n            }\n        }\n        return rows\n    }\n\n    return (\n        <>\n            {renderRequirements()}\n        </>\n    )\n}\n\nexport default Requirements"]},"metadata":{},"sourceType":"module"}