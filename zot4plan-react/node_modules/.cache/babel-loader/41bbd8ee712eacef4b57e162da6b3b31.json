{"ast":null,"code":"var _jsxFileName = \"/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/Courses.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport CourseCard from \"./CourseCard\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Courses() {\n  _s();\n\n  const [courses, setCourses] = useState([{\n    id: 'I&C SCI 31',\n    name: 'Introduction to Programming',\n    description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n    prerequisite: [],\n    next: [],\n    units: 4,\n    taken: false,\n    quarter: 0\n  }, {\n    id: 'I&C SCI 32',\n    name: 'Programming with Software Libraries',\n    description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n    prerequisite: [],\n    next: [],\n    units: 4,\n    taken: false,\n    quarter: 0\n  }, {\n    id: 'I&C SCI 33',\n    name: 'Intermediate Programming',\n    description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n    prerequisite: [],\n    next: [],\n    units: 4,\n    taken: false,\n    quarter: 0\n  }, {\n    id: 'I&C SCI 34',\n    name: 'Intermediate Programming',\n    description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n    prerequisite: [],\n    next: [],\n    units: 4,\n    taken: false,\n    quarter: 0\n  }, {\n    id: 'I&C SCI 35',\n    name: 'Intermediate Programming',\n    description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n    prerequisite: [],\n    next: [],\n    units: 4,\n    taken: false,\n    quarter: 0\n  }]);\n  let rowCount = Math.floor(courses.length / 3) + 1;\n  let index = 0;\n\n  const renderRows = () => {\n    let rows = [];\n\n    for (let r = 0; r < rowCount; r++) rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      md: 3,\n      className: \"mt-4\",\n      children: renderCols()\n    }, 'row' + r, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this));\n\n    return rows;\n  };\n\n  const renderCols = () => {\n    let cols = [];\n\n    for (let c = 0; c < 3 && index < courses.length; c++) {\n      cols.push( /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(CourseCard, {\n          item: courses[index],\n          index: courses[index].id\n        }, courses[index].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, \"col\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this));\n      index++;\n    }\n\n    return cols;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    variant: \"light\",\n    children: renderRows()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Courses, \"i+Ndy1XgqvhM3ZH7Xn9l4T/Cq4g=\");\n\n_c = Courses;\nexport default Courses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Courses\");","map":{"version":3,"sources":["/Users/tramla/Desktop/Zot4Plan/zot4plan-react/src/components/Courses.js"],"names":["useState","CourseCard","Container","Row","Col","Courses","courses","setCourses","id","name","description","prerequisite","next","units","taken","quarter","rowCount","Math","floor","length","index","renderRows","rows","r","push","renderCols","cols","c"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport CourseCard from \"./CourseCard\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col} from 'react-bootstrap';\n\nfunction Courses() {\n    const [courses, setCourses] = useState([\n        {\n            id: 'I&C SCI 31',    \n            name: 'Introduction to Programming',\n            description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n            prerequisite: [],\n            next: [],\n            units: 4,\n            taken: false,\n            quarter: 0,\n        },\n        {\n            id: 'I&C SCI 32',    \n            name: 'Programming with Software Libraries',\n            description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n            prerequisite: [],\n            next: [],\n            units: 4,\n            taken: false,\n            quarter: 0,\n        },\n        {\n            id: 'I&C SCI 33',    \n            name: 'Intermediate Programming',\n            description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n            prerequisite: [],\n            next: [],\n            units: 4,\n            taken: false,\n            quarter: 0,\n        },\n        {\n            id: 'I&C SCI 34',    \n            name: 'Intermediate Programming',\n            description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n            prerequisite: [],\n            next: [],\n            units: 4,\n            taken: false,\n            quarter: 0,\n        },\n        {\n            id: 'I&C SCI 35',    \n            name: 'Intermediate Programming',\n            description: 'Introduction to fundamental concepts and techniques for writing software in a high-level programming language. Covers the syntax and semantics of data types, expressions, exceptions, control structures, input/output, methods, classes, and pragmatics of programming.',\n            prerequisite: [],\n            next: [],\n            units: 4,\n            taken: false,\n            quarter: 0,\n        },\n    ]);\n\n    let rowCount = Math.floor(courses.length/3) + 1;\n    let index = 0;\n    const renderRows = () => {\n        let rows=[];\n        for(let r = 0; r < rowCount; r++)\n            rows.push(\n                <Row key={'row'+r} md={3} className='mt-4'>\n                    {renderCols()}\n                </Row>\n            );\n        return rows;\n    }\n\n    const renderCols = () => {\n        let cols=[]\n        for(let c = 0; c < 3 && index < courses.length; c++){\n                cols.push(\n                    <Col key={\"col\"+index}>\n                        <CourseCard \n                            key={courses[index].id}\n                            item={courses[index]}\n                            index={courses[index].id}\n                        > \n                        </CourseCard>\n                    </Col>\n                )\n            index++;\n        }\n        return cols;   \n    }\n\n    return (\n        <Container className='mt-4' variant=\"light\">\n            {renderRows()}\n        </Container>\n    );\n}\n\n  \nexport default Courses;"]},"metadata":{},"sourceType":"module"}